uniform sampler2D texture0;
varying mediump vec2 uvVarying;
varying mediump vec4 colorVarying;

uniform float agk_time;
uniform vec2 agk_resolution;

uniform float fBlurAmount;
uniform vec4 v4Color;
uniform float iSize;

mediump vec4 v4Blurred = vec4(0.0);
mediump float fSigma = clamp((iSize / 5.0), 0.0, 1.0);
mediump float divisor = iSize + (mod(iSize, 2.0) - 1.0);

mediump vec2 uOff = vec2(1.0/agk_resolution.x, 0.0); // these can be changed to match the size of the texture/pixel size
mediump vec2 vOff = vec2(0.0, 1.0/agk_resolution.y);

float normpdf(float x, float sigma)
{
	return 0.39894*exp(-0.5*x*x / (sigma*sigma)) / sigma;
}

vec2 offset(int ind, vec2 off)
{
	return fBlurAmount * float(ind) * off;
}
 
void main()
{
	if(iSize == 4.0) { fSigma -= 0.175; }
	vec4 col = texture2D(texture0, uvVarying) * colorVarying;
	
	int iter = (int(iSize) - 1) / 2;
	
	for (int i = -iter; i <= iter; ++i)
	{
		for (int j = -iter; j <= iter; ++j)
		{
			// col += texture2D(texture0, vec2(uvVarying.x + float(i) * fBlurAmount, uvVarying.y + float(j) * fBlurAmount)) * normpdf(float(i), 7.0);
			// col += texture2D(texture0, uvVarying+(fBlurAmount*float(i)*uOff)+(fBlurAmount*float(j)*vOff)) * normpdf(float(i), 1.0);
			// col += texture2D(texture0, uvVarying + offset(i,uOff) + offset(j,vOff)) * normpdf(float(i), 1.0);
			col += texture2D(texture0, uvVarying + offset(i,uOff) + offset(j,vOff)) * normpdf(float(i), fSigma);
		}
	}
	
	v4Blurred = col / divisor;
	gl_FragColor = vec4(mix(v4Blurred.rgb,v4Color.rgb,v4Color.a),1.0);
}